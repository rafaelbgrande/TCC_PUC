<?xml version="1.0" encoding="UTF-8"?>
<job>
  <name>DW_ETL_JOB</name>
  <description/>
  <extended_description/>
  <job_version/>
  <job_status>0</job_status>
  <directory>/</directory>
  <created_user>-</created_user>
  <created_date>2021/06/29 00:15:30.288</created_date>
  <modified_user>-</modified_user>
  <modified_date>2021/06/29 00:15:30.288</modified_date>
  <parameters>
    <parameter>
      <name>CalendarEndDate</name>
      <default_value>31/12/2021</default_value>
      <description/>
    </parameter>
    <parameter>
      <name>CalendarStartDate</name>
      <default_value>01/01/2020</default_value>
      <description/>
    </parameter>
  </parameters>
  <connection>
    <name>db_dw</name>
    <server>localhost</server>
    <type>POSTGRESQL</type>
    <access>Native</access>
    <database>TCC</database>
    <port>5432</port>
    <username>postgres</username>
    <password>Encrypted 2be98afc86aa7f2e4cb79ba73dd82bad9</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>5432</attribute>
      </attribute>
    </attributes>
  </connection>
  <slaveservers>
    </slaveservers>
  <job-log-table>
    <connection/>
    <schema/>
    <table/>
    <size_limit_lines/>
    <interval/>
    <timeout_days/>
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>STATUS</id>
      <enabled>Y</enabled>
      <name>STATUS</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>STARTDATE</id>
      <enabled>Y</enabled>
      <name>STARTDATE</name>
    </field>
    <field>
      <id>ENDDATE</id>
      <enabled>Y</enabled>
      <name>ENDDATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>DEPDATE</id>
      <enabled>Y</enabled>
      <name>DEPDATE</name>
    </field>
    <field>
      <id>REPLAYDATE</id>
      <enabled>Y</enabled>
      <name>REPLAYDATE</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>Y</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>EXECUTING_SERVER</id>
      <enabled>N</enabled>
      <name>EXECUTING_SERVER</name>
    </field>
    <field>
      <id>EXECUTING_USER</id>
      <enabled>N</enabled>
      <name>EXECUTING_USER</name>
    </field>
    <field>
      <id>START_JOB_ENTRY</id>
      <enabled>N</enabled>
      <name>START_JOB_ENTRY</name>
    </field>
    <field>
      <id>CLIENT</id>
      <enabled>N</enabled>
      <name>CLIENT</name>
    </field>
  </job-log-table>
  <jobentry-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>TRANSNAME</name>
    </field>
    <field>
      <id>JOBENTRYNAME</id>
      <enabled>Y</enabled>
      <name>STEPNAME</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>RESULT</id>
      <enabled>Y</enabled>
      <name>RESULT</name>
    </field>
    <field>
      <id>NR_RESULT_ROWS</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_ROWS</name>
    </field>
    <field>
      <id>NR_RESULT_FILES</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_FILES</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>N</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>COPY_NR</id>
      <enabled>N</enabled>
      <name>COPY_NR</name>
    </field>
  </jobentry-log-table>
  <channel-log-table>
    <connection/>
    <schema/>
    <table/>
    <timeout_days/>
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>LOGGING_OBJECT_TYPE</id>
      <enabled>Y</enabled>
      <name>LOGGING_OBJECT_TYPE</name>
    </field>
    <field>
      <id>OBJECT_NAME</id>
      <enabled>Y</enabled>
      <name>OBJECT_NAME</name>
    </field>
    <field>
      <id>OBJECT_COPY</id>
      <enabled>Y</enabled>
      <name>OBJECT_COPY</name>
    </field>
    <field>
      <id>REPOSITORY_DIRECTORY</id>
      <enabled>Y</enabled>
      <name>REPOSITORY_DIRECTORY</name>
    </field>
    <field>
      <id>FILENAME</id>
      <enabled>Y</enabled>
      <name>FILENAME</name>
    </field>
    <field>
      <id>OBJECT_ID</id>
      <enabled>Y</enabled>
      <name>OBJECT_ID</name>
    </field>
    <field>
      <id>OBJECT_REVISION</id>
      <enabled>Y</enabled>
      <name>OBJECT_REVISION</name>
    </field>
    <field>
      <id>PARENT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>PARENT_CHANNEL_ID</name>
    </field>
    <field>
      <id>ROOT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>ROOT_CHANNEL_ID</name>
    </field>
  </channel-log-table>
  <pass_batchid>N</pass_batchid>
  <shared_objects_file/>
  <entries>
    <entry>
      <name>Start</name>
      <description/>
      <type>SPECIAL</type>
      <attributes/>
      <start>Y</start>
      <dummy>N</dummy>
      <repeat>N</repeat>
      <schedulerType>0</schedulerType>
      <intervalSeconds>0</intervalSeconds>
      <intervalMinutes>60</intervalMinutes>
      <hour>12</hour>
      <minutes>0</minutes>
      <weekDay>1</weekDay>
      <DayOfMonth>1</DayOfMonth>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>64</xloc>
      <yloc>80</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>Create Schemas - dw | staging</name>
      <description/>
      <type>SQL</type>
      <attributes/>
      <sql>DO $$
begin
if not exists
(
   select schema_name
     from information_schema.schemata
    where schema_name = 'staging'
)
then
   execute 'create schema staging';
end if;
if not exists
(
   select schema_name
     from information_schema.schemata
    where schema_name = 'dw'
)
then
   execute 'create schema dw';
end if;
end
$$</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>db_dw</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>240</xloc>
      <yloc>80</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>Create Tables - Staging</name>
      <description/>
      <type>SQL</type>
      <attributes/>
      <sql>do $$
begin
if not exists
(
   select tablename
     from pg_tables
    where schemaname = 'staging'
      and tablename  = 'tb_controle_carga'
)
then
   create table staging.tb_controle_carga
   (
       id                            serial         not null
     , dt_ult_atualizacao            timestamp      not null
     , constraint pk_controle_carga  primary key(id)
   );
end if;


if not exists
(
   select tablename
     from pg_tables
    where schemaname = 'staging'
      and tablename  = 'tb_musica_auxiliar'
)
then
   create table staging.tb_musica_auxiliar
   (
       id_musica                     int            not null
     , interpretes                   varchar(4000)  not null
     , interpretes_antigo            varchar(4000)  null
     , generos                       varchar(4000)  not null
     , generos_antigo                varchar(4000)  null
     , constraint pk_musica_auxiliar  primary key(id_musica)
   );
end if;
end $$;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>db_dw</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>448</xloc>
      <yloc>80</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>DW - Create Tables</name>
      <description/>
      <type>SQL</type>
      <attributes/>
      <sql>do $$
begin
if not exists
(
   select tablename
     from pg_tables
    where schemaname = 'dw'
      and tablename  = 'dim_calendario'
)
then
   create table dw.dim_calendario
   (
       id                            int            not null
     , data                          date           not null
     , ano                           smallint       not null
     , ano_data_inicio               date           not null
     , ano_data_fim                  date           not null
     , mes                           smallint       not null
     , mes_sigla                     char(3)        not null
     , mes_nome                      varchar(10)    not null
     , mes_data_inicio               date           not null
     , mes_data_fim                  date           not null
     , quartil                       smallint       not null
     , quartil_nome                  char(2)        not null
     , dia                           smallint       not null
     , dia_do_ano                    smallint       not null
     , dia_da_semana_numero          smallint       not null
     , dia_da_semana_sigla           char(3)        not null
     , dia_da_semana_nome            varchar(10)    not null
     , dia_da_semana_nome_completo   varchar(15)    not null
     , fim_de_semana                 char(3)        not null
     , semana                        smallint       not null
     , semana_iso                    smallint       not null
     , semana_data_inicio            date           not null
     , semana_data_fim               date           not null
     , constraint pk_dim_calendario primary key(id)
   );
end if;


if not exists
(
   select tablename
     from pg_tables
    where schemaname = 'dw'
      and tablename  = 'dim_usuario'
)
then
   create table dw.dim_usuario
   (
       id                            int            not null
     , nome                          varchar(100)   not null
     , ativo                         char(1)        not null
     , perfil                        varchar(100)   not null
     , constraint pk_dim_usuario primary key(id)
   );
end if;


if not exists
(
   select tablename
     from pg_tables
    where schemaname = 'dw'
      and tablename  = 'dim_musica'
)
then
   create table dw.dim_musica
   (
       id                            int            not null
     , nome                          varchar(150)   not null
     , gravadora                     varchar(100)   not null
     , ano                           smallint       not null
     , ativo                         char(1)        not null
     , dt_inclusao_id_calendario     int            not null
     , dt_inclusao                   timestamp      not null
     , id_usuario                    int            not null
     , constraint pk_dim_musica              primary key(id)
     , constraint fk_dim_musica_calendario   foreign key(dt_inclusao_id_calendario)   references dw.dim_calendario(id)
     , constraint fk_dim_musica_usuario      foreign key(id_usuario)                  references dw.dim_usuario(id)
   );
end if;


if not exists
(
   select tablename
     from pg_tables
    where schemaname = 'dw'
      and tablename  = 'dim_musica_interprete'
)
then
   create table dw.dim_musica_interprete
   (
       sid                           serial         not null
     , id_musica                     int            not null
     , interprete                    varchar(150)   not null
     , constraint pk_dim_musica_interprete          primary key(sid)
     , constraint uk_dim_musica_interprete          unique(id_musica, interprete)
     , constraint fk_dim_musica_interprete_musica   foreign key(id_musica)           references dw.dim_musica(id)
   );
end if;


if not exists
(
   select tablename
     from pg_tables
    where schemaname = 'dw'
      and tablename  = 'dim_musica_genero'
)
then
   create table dw.dim_musica_genero
   (
       sid                           serial         not null
     , id_musica                     int            not null
     , genero                        varchar(100)   not null
     , genero_pai                    varchar(100)   not null
     , constraint pk_dim_musica_genero          primary key(sid)
     , constraint fk_dim_musica_genero_musica   foreign key(id_musica)   references dw.dim_musica(id)
   );
end if;


if not exists
(
   select tablename
     from pg_tables
    where schemaname = 'dw'
      and tablename  = 'fat_play'
)
then
   create table dw.fat_play
   (
       sid                           bigserial      not null
     , cod_agrupador                 bigint         not null
     , id_usuario                    int            not null
     , id_musica                     int            not null
     , dt_play_id_calendario         int            not null
     , dt_play                       timestamp      not null 
     , tempo_inicio                  decimal(8, 3)  not null
     , tempo_fim                     decimal(8, 3)  not null
     , tempo_total                   decimal(8, 3)  not null
     , tempo_play                    decimal(8, 3)  not null
     , qtd_play                      smallint       not null
     , qtd_pause                     smallint       not null
     , qtd_avanco                    smallint       not null
     , qtd_volta                     smallint       not null
     , constraint pk_fat_play              primary key(sid)
     , constraint uk_fat_play              unique(cod_agrupador)
     , constraint fk_fat_play_ususario     foreign key(id_usuario)              references dw.dim_usuario(id)
     , constraint fk_fat_play_musica       foreign key(id_musica)               references dw.dim_musica(id)
     , constraint fk_fat_play_calendario   foreign key(dt_play_id_calendario)   references dw.dim_calendario(id)
   );
end if;


if not exists
(
   select tablename
     from pg_tables
    where schemaname = 'dw'
      and tablename  = 'fat_download'
)
then
   create table dw.fat_download
   (
       id                            bigint         not null
     , id_usuario                    int            not null
     , id_musica                     int            not null
     , dt_download_id_calendario     int            not null
     , dt_download                   timestamp      not null
     , constraint pk_fat_download              primary key(id)
     , constraint fk_fat_download_ususario     foreign key(id_usuario)                  references dw.dim_usuario(id)
     , constraint fk_fat_download_musica       foreign key(id_musica)                   references dw.dim_musica(id)
     , constraint fk_fat_download_calendario   foreign key(dt_download_id_calendario)   references dw.dim_calendario(id)
   );
end if;
end $$;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>db_dw</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>608</xloc>
      <yloc>80</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>DW - Load Calendario</name>
      <description/>
      <type>SQL</type>
      <attributes/>
      <sql>do $$
declare
p_dt_ini             date := to_date('${CalendarStartDate}', 'dd/mm/yyyy');
p_dt_fim             date := to_date('${CalendarEndDate}', 'dd/mm/yyyy');
v_dt_min_calendario  date;
v_dt_max_calendario  date;
begin
select min(data)
     , max(data)
  into v_dt_min_calendario
     , v_dt_max_calendario
  from dw.dim_calendario;

if (v_dt_min_calendario is null or v_dt_max_calendario is null or p_dt_ini &lt; v_dt_min_calendario or p_dt_fim > v_dt_max_calendario)
then
insert into dw.dim_calendario
( id, data, ano, ano_data_inicio, ano_data_fim, mes, mes_sigla, mes_nome, mes_data_inicio, mes_data_fim, quartil, quartil_nome
, dia, dia_do_ano, dia_da_semana_numero, dia_da_semana_sigla, dia_da_semana_nome, dia_da_semana_nome_completo, fim_de_semana
, semana, semana_iso, semana_data_inicio, semana_data_fim)
with generated_days as
(
   select p_dt_ini + number as p_data
     from generate_series(0, p_dt_fim - p_dt_ini) as number
)
select cast(to_char(p_data, 'yyyymmdd') as int)                                                as id
     , p_data                                                                                  as data
     , date_part('year', p_data)                                                               as ano
     , cast(date_trunc('year', p_data) as date)                                                as ano_data_inicio
     , cast(((date_trunc('year', p_data) + interval '1 year') - interval '1 day') as date)     as ano_data_fim
     , date_part('month', p_data)                                                              as mes
     , case date_part('month', p_data)
          when 1  then 'Jan'
          when 2  then 'Fev'
          when 3  then 'Mar'
          when 4  then 'Abr'
          when 5  then 'Mai'
          when 6  then 'Jun'
          when 7  then 'Jul'
          when 8  then 'Ago'
          when 9  then 'Set'
          when 10 then 'Out'
          when 11 then 'Nov'
          when 12 then 'Dez'
       end                                                                                     as mes_sigla
     , case date_part('month', p_data)
          when 1  then 'Janeiro'
          when 2  then 'Fevereiro'
          when 3  then 'Março'
          when 4  then 'Abril'
          when 5  then 'Maio'
          when 6  then 'Junho'
          when 7  then 'Julho'
          when 8  then 'Agosto'
          when 9  then 'Setembro'
          when 10 then 'Outubro'
          when 11 then 'Novembro'
          when 12 then 'Dezembro'
       end                                                                                     as mes_nome
     , cast(date_trunc('month', p_data) as date)                                               as mes_data_inicio
     , cast(((date_trunc('month', p_data) + interval '1 month') - interval '1 day') as date)   as mes_data_fim
     , date_part('quarter', p_data)                                                            as quartil
     , 'Q' || cast(date_part('quarter', p_data) as char(1))                                    as quartil_nome
     , date_part('day', p_data)                                                                as dia
     , date_part('doy', p_data)                                                                as dia_do_ano
     , date_part('dow', p_data) + 1                                                            as dia_da_semana_numero
     , case date_part('dow', p_data)
          when 0 then 'Dom'
          when 1 then 'Seg'
          when 2 then 'Ter'
          when 3 then 'Qua'
          when 4 then 'Qui'
          when 5 then 'Sex'
          when 6 then 'Sab'
       end                                                                                     as dia_da_semana_sigla
     , case date_part('dow', p_data)
          when 0 then 'Domingo'
          when 1 then 'Segunda'
          when 2 then 'Terça'
          when 3 then 'Quarta'
          when 4 then 'Quinta'
          when 5 then 'Sexta'
          when 6 then 'Sabado'
       end                                                                                     as dia_da_semana_nome
     , case date_part('dow', p_data)
          when 0 then 'Domingo'
          when 1 then 'Segunda-feira'
          when 2 then 'Terça-feira'
          when 3 then 'Quarta-feira'
          when 4 then 'Quinta-feira'
          when 5 then 'Sexta-feira'
          when 6 then 'Sabado'
       end                                                                                     as dia_da_semana_nome_completo
     , case
          when date_part('dow', p_data) in (0, 6)
          then 'Sim'
          else 'Nao'
       end                                                                                     as fim_de_semana
     , cast(to_char(p_data, 'WW') as int)                                                      as semana
     , cast(to_char(p_data, 'IW') as int)                                                      as semana_iso
     , cast(p_data - (date_part('dow', p_data) * interval '1 day') as date)                    as semana_data_inicio
     , cast(p_data + ((6 - date_part('dow', p_data)) * interval '1 day') as date)              as semana_data_fim
  from generated_days      as gdays
 where not exists (
                    select 1
                      from dw.dim_calendario   as calend
                     where calend.id = cast(to_char(gdays.p_data, 'yyyymmdd') as int)
                  );
end if;
end $$;</sql>
      <useVariableSubstitution>T</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>T</sendOneStatement>
      <connection>db_dw</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>784</xloc>
      <yloc>80</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>Set Last and Current ETL Date</name>
      <description/>
      <type>TRANS</type>
      <attributes/>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Entry.Current.Directory}/Transform/GET_LAST_ETL_DATE.ktr</filename>
      <transname/>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration>Pentaho local</run_configuration>
      <suppress_result_data>N</suppress_result_data>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>976</xloc>
      <yloc>80</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>DW - Load Usuario</name>
      <description/>
      <type>TRANS</type>
      <attributes/>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Entry.Current.Directory}/Transform/DW_LOAD_USUARIO.ktr</filename>
      <transname/>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration>Pentaho local</run_configuration>
      <suppress_result_data>N</suppress_result_data>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1152</xloc>
      <yloc>80</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>DW - Load Musica</name>
      <description/>
      <type>TRANS</type>
      <attributes/>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Entry.Current.Directory}/Transform/DW_LOAD_MUSICA.ktr</filename>
      <transname/>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration>Pentaho local</run_configuration>
      <suppress_result_data>N</suppress_result_data>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1296</xloc>
      <yloc>80</yloc>
      <attributes_kjc/>
    </entry>
    <entry>
      <name>DW - Load Download and Play</name>
      <description/>
      <type>TRANS</type>
      <attributes/>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Entry.Current.Directory}/Transform/DW_LOAD_DOWN_PLAY.ktr</filename>
      <transname/>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <logging_remote_work>N</logging_remote_work>
      <run_configuration>Pentaho local</run_configuration>
      <suppress_result_data>N</suppress_result_data>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1472</xloc>
      <yloc>80</yloc>
      <attributes_kjc/>
    </entry>
  </entries>
  <hops>
    <hop>
      <from>Start</from>
      <to>Create Schemas - dw | staging</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>Create Schemas - dw | staging</from>
      <to>Create Tables - Staging</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>DW - Create Tables</from>
      <to>DW - Load Calendario</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>DW - Load Calendario</from>
      <to>Set Last and Current ETL Date</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>DW - Load Usuario</from>
      <to>DW - Load Musica</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>DW - Load Musica</from>
      <to>DW - Load Download and Play</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Set Last and Current ETL Date</from>
      <to>DW - Load Usuario</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create Tables - Staging</from>
      <to>DW - Create Tables</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
  </hops>
  <notepads>
  </notepads>
  <attributes/>
</job>
